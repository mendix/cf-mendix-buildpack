name: Deploy to Github Releases

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  pre:
    name: Prepare workflow run
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.skip-check.outputs.should_skip }}
    steps:
      - name: Check if workflow should be skipped
        id: skip-check
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}
          paths_ignore: '["**.md", "dev/**"]'
  prepare-deployment:
    name: Prepare deployment
    runs-on: ubuntu-latest
    needs: pre
    if: ${{ needs.pre.outputs.skip != 'true' && github.event.pull_request.merged }}
    outputs:
      exists: ${{ steps.get-version.outputs.exists }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        if: ${{ github.event.pull_request.merged }}
        with:
          ref: master
      - run: |
          git fetch --prune --unshallow	--tag
      - name: Get version
        id: get-version
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          if [ $(git tag -l "${VERSION}") ]; then
            EXISTS=true
          else
            EXISTS=false
          fi
          echo "::set-output name=exists::${EXISTS}"
          echo "::set-output name=version::${VERSION}"
  build:
    name: Build
    needs: pre
    if: ${{ needs.pre.outputs.skip != 'true' && github.event.pull_request.merged }}
    uses: ./.github/workflows/build.yml
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [prepare-deployment, build]
    if: ${{ needs.prepare-deployment.outputs.exists == 'false' }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Create Github release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-deployment.outputs.version }}
          release_name: ${{github.event.pull_request.title}}
          body: ${{github.event.pull_request.body}}
          draft: true
          prerelease: false
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/cf-mendix-buildpack.zip
          asset_name: cf-mendix-buildpack.zip
          asset_content_type: application/zip
